from azureml.core import Workspace, Experiment, ScriptRunConfig, Environment, Model
from azureml.core.conda_dependencies import CondaDependencies
from azureml.widgets import RunDetails
import os

# Load the workspace from the saved config file
ws = Workspace.from_config()
print('Ready to work with', ws.name)

# Create a Python environment for the experiment
sklearn_env = Environment("sklearn-env")

# Ensure the required packages are installed
packages = CondaDependencies.create(
    conda_packages=['scikit-learn', 'pandas', 'numpy', 'pip'],
    pip_packages=['azureml','azureml-widgets','azureml-defaults', 'azureml-core', 'joblib']
)
sklearn_env.python.conda_dependencies = packages

# Create a script config
script_config = ScriptRunConfig(
    source_directory='.',  # Current directory containing training.py
    script='training_script.py',
    arguments = ['--reg-rate', 0.1],
    compute_target='ciIzzumaniD2sv3',  # Use 'aml-cluster' for remote compute
    environment=sklearn_env
)

# Submit the experiment
experiment = Experiment(workspace=ws, name='training-experiment')
run = experiment.submit(config=script_config)

# Show run details while running (optional - works in Jupyter)
# RunDetails(run).show()

# Wait for the run to complete
run.wait_for_completion(show_output=True)

# Get logged metrics
print("\n========== Run Metrics ==========")
metrics = run.get_metrics()
for key in metrics.keys():
    print(f"{key}: {metrics[key]}")

# List all files generated by the experiment
print("\n========== Files Generated ==========")
for file in run.get_file_names():
    print(file)

# Download the model file specifically
print("\n========== Downloading Model ==========")
model_downloaded = False
try:
    # Check if the model file exists in outputs
    if 'outputs/model.pkl' in run.get_file_names():
        # Download the model file
        run.download_file(name='outputs/model.pkl', output_file_path='model.pkl')
        print("Model downloaded successfully as 'model.pkl'")
        model_downloaded = True
        
        # Also download to a models directory for better organization
        os.makedirs('models', exist_ok=True)
        run.download_file(name='outputs/model.pkl', output_file_path='models/model.pkl')
        print("Model also saved to 'models/model.pkl'")
    else:
        print("Warning: 'outputs/model.pkl' not found in run outputs")
        print("Available files:", run.get_file_names())
except Exception as e:
    print(f"Error downloading model: {e}")

# Download all output files
print("\n========== Downloading All Outputs ==========")
try:
    run.download_files(prefix='outputs', output_directory='./outputs', append_prefix=False)
    print("All output files downloaded to './outputs' directory")
except Exception as e:
    print(f"Error downloading outputs: {e}")

# Register the model from local file
print("\n========== Registering Model ==========")
if model_downloaded and os.path.exists('model.pkl'):
    try:
        # Extract metrics for model tags
        model_tags = {
            'data-format': 'CSV',
            'experiment': experiment.name,
            'run_id': run.id
        }
        
        # Add metrics to tags if available
        if 'Accuracy' in metrics:
            model_tags['accuracy'] = str(metrics['Accuracy'])
        if 'AUC' in metrics:
            model_tags['auc'] = str(metrics['AUC'])
        
        # Register the model
        model = Model.register(
            workspace=ws,
            model_name='classification_model',
            model_path='model.pkl',  # local path
            description='A diabetes classification model trained with logistic regression',
            tags=model_tags,
            model_framework=Model.Framework.SCIKITLEARN,
            model_framework_version='0.24.2'  # Update based on your sklearn version
        )
        
        print(f"Model registered successfully!")
        print(f"Model Name: {model.name}")
        print(f"Model Version: {model.version}")
        print(f"Model ID: {model.id}")
        print(f"Model Tags: {model.tags}")
        

       # Alternative method: Register model directly from run outputs
        # This approach registers the model directly from the run's output files
        # without downloading it locally first
        """
        model = run.register_model(
            model_name='classification_model',
            model_path='outputs/model.pkl',  # run outputs path
            description='A diabetes classification model trained with logistic regression',
            tags=model_tags,
            model_framework=Model.Framework.SCIKITLEARN,
            model_framework_version='0.24.2'  # Update based on your sklearn version
        )
        
        print(f"Model registered successfully using run.register_model()!")
        print(f"Model Name: {model.name}")
        print(f"Model Version: {model.version}")
        print(f"Model ID: {model.id}")
        print(f"Model Tags: {model.tags}")
        """

    except Exception as e:
        print(f"Error registering model: {e}")
else:
    print("Model registration skipped - no model file available")

# List all registered models in the workspace
print("\n========== Registered Models in Workspace ==========")
try:
    model_count = 0
    for model in Model.list(ws):
        # Get model name and auto-generated version
        print(f"{model.name}, version: {model.version}")
        model_count += 1
    
    if model_count == 0:
        print("No models registered in this workspace")
    else:
        print(f"\nTotal models registered: {model_count}")
except Exception as e:
    print(f"Error listing models: {e}")

# Display run details
print("\n========== Run Summary ==========")
print(f"Run ID: {run.id}")
print(f"Run Status: {run.get_status()}")
print(f"Run Details URL: {run.get_portal_url()}")

print("\nRun completed!")